
#include <stdio.h>

//Chamadas das funções
static void	append_node(t_node **stack, int nbr);

typedef struct s_node {
    int nbr;
    struct s_node *next;
    struct s_node *prev;
} t_node;

int	stack_search(t_node *stack, int nbr)
{
	int	flag;

	if (!stack)
		return (0);
	flag = 0;
	while (stack)
	{
		if (stack->nbr == nbr) {
		    flag = 1;
		    printf("Elemento encontrado!");
		    stack->
		}
		stack = stack->next;
		   
	}
	return (count);
}

int main()
{
    t_node **list;
    int value;
    
    while (value) {
        printf("Insert a number or click 'Q' to quit: ");
        scanf("%d\n", &value);
        if (value == 'Q')
            break;
        append_node(list, value);
    }
    
    printf("Insert a number you want to search for: ");
    scanf("%d\n", &value);
    
    search(list, value);
    return (0);
}

//Funções Auxiliares


int	stack_len(t_node *stack)
{
	int	count;

	if (!stack)
		return (0);
	count = 0;
	while (stack)
	{
		stack = stack->next;
		count++;
	}
	return (count);
}

t_node	*find_last(t_node *stack)
{
	if (!stack)
		return (NULL);
	while (stack->next)
		stack = stack->next;
	return (stack);
}


static void	append_node(t_node **stack, int nbr)
{
	t_stack_node	*node;
	t_stack_node	*last_node;

	if (!stack)
		return ;
	node = malloc(sizeof(t_stack_node));
	if (!node)
		return ;
	node->next = NULL;
	node->nbr = nbr;
	if (!(*stack))
	{
		*stack = node;
		node->prev = NULL;
	}
	else
	{
		last_node = find_last(*stack);
		last_node->next = node;
		node->prev = last_node;
	}
}
